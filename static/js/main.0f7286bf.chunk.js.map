{"version":3,"sources":["store/reducers/tasksReducer.js","store/reducers/counterReducer.js","store/reducers/rootReducer.js","store/index.js","theme/GlobalStyle.js","theme/mainTheme.js","templates/MainTemplate.js","components/atoms/Heading.js","components/atoms/Paragraph.js","components/atoms/Button.js","components/molecules/TaskItem.js","store/actions/tasksActions.js","store/reducers/selectors.js","components/organisms/Tasks.js","components/organisms/Counter.js","store/actions/counterActions.js","views/App.js","index.js"],"names":["initState","tasks","id","title","darkMode","completed","tasksReducer","state","action","type","map","task","payload","counter","counterReducer","rootReducer","combineReducers","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","GlobalStyle","createGlobalStyle","theme","black","white","grey100","grey200","regular","bold","MainTemplate","children","Heading","styled","h1","Paragraph","p","css","Button","div","active","toggle","ListItem","li","TaskItem","loading","handleDarkMode","setState","prevState","loader","setTimeout","this","clearTimeout","props","isDark","changeMode","onClick","Component","connect","dispatch","changeModeAction","selectTasks","selectCompletedTasks","createSelector","filter","selectCounter","TasksListWrapper","grey","InnerWrapper","TasksList","ul","Tasks","allTasks","filteredTasks","handleAllTasks","handleFilteredTasks","console","log","completedTasks","key","defaultProps","StyledWrapper","StyledSpan","span","Counter","incrementCounter","setInterval","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f7286bf.chunk.js","sourcesContent":["const initState = {\r\n  tasks: [\r\n    {\r\n      id: 1,\r\n      title: 'Rent a car',\r\n      darkMode: true,\r\n      completed: true,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Wipe off the dust',\r\n      darkMode: false,\r\n      completed: false,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'Buy present',\r\n      darkMode: true,\r\n      completed: true,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: 'Clean the flat',\r\n      darkMode: false,\r\n      completed: false,\r\n    },\r\n    {\r\n      id: 5,\r\n      title: 'Pay bills',\r\n      darkMode: false,\r\n      completed: true,\r\n    },\r\n  ],\r\n};\r\n\r\nconst tasksReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'CHANGE_MODE':\r\n      return {\r\n        ...state,\r\n        tasks: [\r\n          ...state.tasks.map(task => {\r\n            if (task.id === action.payload) {\r\n              return {\r\n                ...task,\r\n                darkMode: !task.darkMode,\r\n              };\r\n            }\r\n            return task;\r\n          }),\r\n        ],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default tasksReducer;\r\n","const initState = {\r\n  counter: 0,\r\n};\r\n\r\nconst counterReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'INCREMENT_COUNTER':\r\n      return {\r\n        counter: state.counter + 1,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counterReducer;\r\n","import { combineReducers } from 'redux';\r\nimport tasks from './tasksReducer';\r\nimport counter from './counterReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  counter,\r\n  tasks,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore } from 'redux';\r\nimport rootReducer from 'store/reducers/rootReducer';\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\r\n);\r\n\r\nexport default store;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n@import url('https://fonts.googleapis.com/css?family=Montserrat:400,700&display=swap');\r\n  *,*::before, *::after {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n\r\n  html {\r\n    font-size: 62.5%;\r\n  }\r\n\r\n  body {\r\n    font-size: 1.6rem;\r\n    font-family: 'Montserrat', sans-serif;\r\n    min-height: 100vh;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    padding: 10px;\r\n  }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","export const theme = {\r\n  black: '#000000',\r\n  white: '#FFFFFF',\r\n  grey100: '#F4F5F6',\r\n  grey200: '#D8D8D8',\r\n  regular: 400,\r\n  bold: 700,\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport GlobalStyle from 'theme/GlobalStyle';\r\nimport { theme } from 'theme/mainTheme';\r\n\r\nconst MainTemplate = ({ children }) => (\r\n  <ThemeProvider theme={theme}>\r\n    <GlobalStyle />\r\n    {children}\r\n  </ThemeProvider>\r\n);\r\n\r\nMainTemplate.propTypes = {\r\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.node]).isRequired,\r\n};\r\n\r\nexport default MainTemplate;\r\n","import styled from 'styled-components';\r\n\r\nconst Heading = styled.h1`\r\n  padding: 20px 0;\r\n  text-align: center;\r\n  font-size: 2rem;\r\n  text-transform: uppercase;\r\n  background-color: #000;\r\n  color: #fff;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport default Heading;\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst Paragraph = styled.p`\r\n  font-size: 1.6rem;\r\n  font-weight: ${({ theme }) => theme.bold};\r\n  color: #000;\r\n  ${({ darkMode }) =>\r\n    darkMode &&\r\n    css`\r\n      color: ${({ theme }) => theme.white};\r\n    `}\r\n`;\r\n\r\nexport default Paragraph;\r\n","import styled, { css } from 'styled-components';\r\n\r\nconst Button = styled.div`\r\n  flex-basis: 50%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  text-align: center;\r\n  padding: 10px;\r\n  font-weight: ${({ theme }) => theme.bold};\r\n  color: ${({ theme }) => theme.grey200};\r\n  text-transform: uppercase;\r\n  cursor: pointer;\r\n  ${({ active }) =>\r\n    active &&\r\n    css`\r\n      color: ${({ theme }) => theme.black};\r\n      border-bottom: 2px solid ${({ theme }) => theme.black};\r\n    `}\r\n  ${({ toggle }) =>\r\n    toggle &&\r\n    css`\r\n      flex-basis: initial;\r\n      padding: 5px 10px;\r\n      font-size: 1.3rem;\r\n      font-weight: ${({ theme }) => theme.bold};\r\n      color: ${({ theme }) => theme.white};\r\n      background-color: ${({ theme }) => theme.black};\r\n      ${({ darkMode }) =>\r\n        darkMode &&\r\n        css`\r\n          color: ${({ theme }) => theme.black};\r\n          background-color: ${({ theme }) => theme.white};\r\n        `}\r\n    `}\r\n`;\r\n\r\nexport default Button;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled, { css } from 'styled-components';\r\nimport Paragraph from 'components/atoms/Paragraph';\r\nimport Button from 'components/atoms/Button';\r\nimport { connect } from 'react-redux';\r\nimport { changeMode as changeModeAction } from 'store/actions/tasksActions';\r\n\r\nconst ListItem = styled.li`\r\n  width: 100%;\r\n  height: 70px;\r\n  padding: 0 20px;\r\n  margin: 15px 0;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.grey100};\r\n  color: ${({ theme }) => theme.white};\r\n  border-radius: 10px;\r\n  ${({ darkMode }) =>\r\n    darkMode &&\r\n    css`\r\n      background-color: ${({ theme }) => theme.black};\r\n    `}\r\n`;\r\n\r\nclass TaskItem extends Component {\r\n  state = {\r\n    loading: true,\r\n    darkMode: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.loader = setTimeout(\r\n      () =>\r\n        this.setState({\r\n          loading: false,\r\n        }),\r\n      3000,\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.loader);\r\n  }\r\n\r\n  handleDarkMode = () => {\r\n    this.setState(prevState => ({\r\n      darkMode: !prevState.darkMode,\r\n      loading: true,\r\n    }));\r\n    this.loader = setTimeout(\r\n      () =>\r\n        this.setState({\r\n          loading: false,\r\n        }),\r\n      3000,\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { loading } = this.state;\r\n    const { id, title, isDark, changeMode } = this.props;\r\n\r\n    return (\r\n      <>\r\n        {isDark ? (\r\n          <ListItem darkMode>\r\n            {loading ? (\r\n              <Paragraph darkMode>Loading...</Paragraph>\r\n            ) : (\r\n              <>\r\n                <Paragraph darkMode>{title}</Paragraph>\r\n                <Button\r\n                  onClick={() => {\r\n                    this.handleDarkMode();\r\n                    changeMode(id);\r\n                  }}\r\n                  toggle\r\n                  darkMode\r\n                >\r\n                  Toggle\r\n                </Button>\r\n              </>\r\n            )}\r\n          </ListItem>\r\n        ) : (\r\n          <ListItem>\r\n            {loading ? (\r\n              <Paragraph>Loading...</Paragraph>\r\n            ) : (\r\n              <>\r\n                <Paragraph>{title}</Paragraph>\r\n                <Button\r\n                  onClick={() => {\r\n                    this.handleDarkMode();\r\n                    changeMode(id);\r\n                  }}\r\n                  toggle\r\n                >\r\n                  Toggle\r\n                </Button>\r\n              </>\r\n            )}\r\n          </ListItem>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    changeMode: id => dispatch(changeModeAction(id)),\r\n  };\r\n};\r\n\r\nTaskItem.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  isDark: PropTypes.bool.isRequired,\r\n  changeMode: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(TaskItem);\r\n","export const changeMode = id => ({\r\n  type: 'CHANGE_MODE',\r\n  payload: id,\r\n});\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const selectTasks = state => state.tasks.tasks;\r\n\r\nexport const selectCompletedTasks = createSelector(selectTasks, tasks => {\r\n  return tasks.filter(task => task.completed);\r\n});\r\n\r\nexport const selectCounter = state => state.counter.counter;\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport Heading from 'components/atoms/Heading';\r\nimport TaskItem from 'components/molecules/TaskItem';\r\nimport Button from 'components/atoms/Button';\r\nimport { selectTasks, selectCompletedTasks } from 'store/reducers/selectors';\r\n\r\nconst TasksListWrapper = styled.div`\r\n  width: 400px;\r\n  min-height: 600px;\r\n  border: 2px solid ${({ theme }) => theme.black};\r\n  background-color: ${({ theme }) => theme.grey};\r\n  @media (orientation: portrait) and (max-width: 600px) {\r\n    width: 95vw;\r\n  }\r\n  @media (orientation: landscape) and (max-width: 768px) {\r\n    width: 95vw;\r\n  }\r\n`;\r\n\r\nconst InnerWrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst TasksList = styled.ul`\r\n  margin: 10px;\r\n  list-style-type: none;\r\n`;\r\n\r\nlet counter = 0;\r\n\r\nclass Tasks extends Component {\r\n  state = {\r\n    allTasks: true,\r\n    filteredTasks: false,\r\n  };\r\n\r\n  handleAllTasks = () => {\r\n    this.setState({\r\n      allTasks: true,\r\n      filteredTasks: false,\r\n    });\r\n  };\r\n\r\n  handleFilteredTasks = () => {\r\n    this.setState({\r\n      allTasks: false,\r\n      filteredTasks: true,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    console.log(`Tasks component render ${++counter} time(s)`);\r\n    const { allTasks, filteredTasks } = this.state;\r\n    const { tasks, completedTasks, children } = this.props;\r\n    return (\r\n      <TasksListWrapper>\r\n        {children}\r\n        <Heading>Tasks list</Heading>\r\n        <InnerWrapper>\r\n          <Button onClick={this.handleAllTasks} active={allTasks}>\r\n            All tasks\r\n          </Button>\r\n          <Button onClick={this.handleFilteredTasks} active={filteredTasks}>\r\n            Completed tasks\r\n          </Button>\r\n        </InnerWrapper>\r\n        <TasksList>\r\n          {allTasks ? (\r\n            <>\r\n              {tasks.map(({ id, title, darkMode }) => (\r\n                <TaskItem key={id} id={id} title={title} isDark={darkMode} />\r\n              ))}\r\n            </>\r\n          ) : null}\r\n          {filteredTasks ? (\r\n            <>\r\n              {completedTasks.map(({ id, title, darkMode }) => (\r\n                <TaskItem key={id} id={id} title={title} isDark={darkMode} />\r\n              ))}\r\n            </>\r\n          ) : null}\r\n        </TasksList>\r\n      </TasksListWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nTasks.propTypes = {\r\n  tasks: PropTypes.arrayOf(PropTypes.object),\r\n  completedTasks: PropTypes.arrayOf(PropTypes.object),\r\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.node]).isRequired,\r\n};\r\n\r\nTasks.defaultProps = {\r\n  tasks: [],\r\n  completedTasks: [],\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    tasks: selectTasks(state),\r\n    completedTasks: selectCompletedTasks(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Tasks);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport { incrementCounter as incrementCounterAction } from 'store/actions/counterActions';\r\nimport { selectCounter } from 'store/reducers/selectors';\r\n\r\nconst StyledWrapper = styled.div`\r\n  text-align: center;\r\n  background-color: ${({ theme }) => theme.black};\r\n  color: ${({ theme }) => theme.white};\r\n`;\r\n\r\nconst StyledSpan = styled.span`\r\n  font-weight: ${({ theme }) => theme.bold};\r\n`;\r\n\r\nclass Counter extends Component {\r\n  componentDidMount() {\r\n    const { incrementCounter } = this.props;\r\n    setInterval(() => {\r\n      incrementCounter();\r\n    }, 1000);\r\n  }\r\n\r\n  render() {\r\n    const { counter } = this.props;\r\n    return (\r\n      <StyledWrapper>\r\n        Time on website: <StyledSpan>{counter} sec</StyledSpan>\r\n      </StyledWrapper>\r\n    );\r\n  }\r\n}\r\n\r\nCounter.propTypes = {\r\n  incrementCounter: PropTypes.func.isRequired,\r\n  counter: PropTypes.number.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    counter: selectCounter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    incrementCounter: () => dispatch(incrementCounterAction()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Counter);\r\n","export const incrementCounter = () => ({\r\n  type: 'INCREMENT_COUNTER',\r\n});\r\n","import React from 'react';\r\nimport MainTemplate from 'templates/MainTemplate';\r\nimport Tasks from 'components/organisms/Tasks';\r\nimport Counter from 'components/organisms/Counter';\r\n\r\nconst App = () => (\r\n  <MainTemplate>\r\n    <Tasks>\r\n      <Counter />\r\n    </Tasks>\r\n  </MainTemplate>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from 'store';\r\nimport App from 'views/App';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}